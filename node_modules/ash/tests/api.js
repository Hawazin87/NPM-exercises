// (The MIT License)

// Copyright (c) 2012 Richard S Allinson <rsa@mountainmansoftware.com>

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// 'Software'), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*jslint nomen: true*/

/*global describe: true, it: true*/

"use strict";

var assert = require("assert"),
    root = require("path").join(__dirname, "/../examples/"),
    dispatch = require("../lib/adapters/func")({root: root});

describe("api", function () {

    describe("dispatch", function () {
        it("should be a typeof function", function () {
            assert.equal(typeof dispatch, "function");
        });
    });

    describe("api.done", function () {
        it("should return hello world", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "done"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "Hello world.");
                }
                count = count + 1;
            });
        });
    });

    describe("api.flush", function () {
        it("should return hello world", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "flush"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "Hello ");
                }
                if (count === 1) {
                    assert.equal(data, "world.");
                }
                if (count === 2) {
                    assert.equal(data, undefined);
                }
                count = count + 1;
            });
        });
    });

    describe("api.error", function () {
        it("should return a raw error", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "error"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data.message, "Hello error.");
                    assert.equal(meta.data.error, true);
                }
                count = count + 1;
            });
        });
    });

    describe("api.use", function () {
        it("should return hello config", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "use"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "Hello config.");
                }
                count = count + 1;
            });
        });
    });

    describe("api.done with a template", function () {

        it("should return tmplAbsolute", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplAbsolute"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<h1>tmplAbsolute</h1>");
                }
                count = count + 1;
            });
        });

        it("should return tmplRelative", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplRelative"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<h1>tmplRelative</h1>");
                }
                count = count + 1;
            });
        });

        it("should return tmplMetaRelative", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplMetaRelative"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<h1>tmplMetaRelative</h1>");
                }
                count = count + 1;
            });
        });

        it("should return tmplInferred", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplInferred"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<h1>tmplInferred</h1>");
                }
                count = count + 1;
            });
        });

        it("should return tmplJson", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplJson"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "{\"key\":\"tmplJson\"}");
                }
                count = count + 1;
            });
        });

        it("should return tmplMetaJson", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplMetaJson"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "{\"key\":\"tmplMetaJson\"}");
                }
                count = count + 1;
            });
        });

        it("should return tmplXml", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplXml"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<xml><key>tmplXml</key></xml>");
                }
                count = count + 1;
            });
        });

        it("should return tmplMetaXml", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplMetaXml"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data, "<xml><key>tmplMetaXml</key></xml>");
                }
                count = count + 1;
            });
        });

        it("should return tmplRaw", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplRaw"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data.key, "tmplRaw");
                }
                count = count + 1;
            });
        });

        it("should return tmplMetaRaw", function () {
            var count = 0;
            dispatch({module: "api/ctrl", method: "tmplMetaRaw"}, function (data, meta) {
                if (count === 0) {
                    assert.equal(data.key, "tmplMetaRaw");
                }
                count = count + 1;
            });
        });
    });
});
