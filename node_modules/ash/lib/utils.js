// (The MIT License)

// Copyright (c) 2012 Richard S Allinson <rsa@mountainmansoftware.com>

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// 'Software'), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*global define: true, window: true*/

"use strict";

define(function () {

    var timers = {};

    return {

        uuidv4: function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
            });
        },

        runtime: function () {
            // Simple test to see if we are on the client
            return typeof window === "undefined" ? "server" : "client";
        },
        /*
            Log function
        */
        log: function (msg, level, source) {
            level = level || "info";
            source = source || "";
            console.log(msg);
        },

        timer: function (name) {

            if (!name) {
                this.log(timers);
                return;
            }
            if (name === "timer:reset") {
                timers = {}; // not sure about this?
            }
            if (timers[name]) {
                timers[name].stop = new Date().getTime();
                timers[name].time = timers[name].stop - timers[name].start;
            } else {
                timers[name] = {};
                timers[name].start = new Date().getTime();
            }
        },

        /*
            Buffered Handler
        */
        bufferedHandler: function (callback, api) {

            var bufferData = "",
                bufferMeta = {};

            return {

                done: function (data, meta) {
                    this.flush(data, meta);
                    callback(bufferData, bufferMeta);
                },

                flush: function (data, meta) {
                    if (data) {
                        bufferData = bufferData + (data || "");
                    }
                    if (meta) {
                        bufferMeta = meta; // This should be merged
                    }
                },

                dispatch: api.dispatch
            };
        }
    };
});